#include "VGA.h"
#include <stdlib.h>
#include <stdarg.h>

#define HSync WING_A_1
#define VSync WING_A_0
#define Red0 WING_A_7
#define Red1 WING_A_5
#define Green0 WING_A_6
#define Green1 WING_A_4
#define Blue0 WING_A_2
#define Blue1 WING_A_3

void setup_pin_select() {
  pinMode(HSync,OUTPUT);
  digitalWrite(HSync,HIGH);
  outputPinForFunction(HSync, 15);
  pinModePPS(HSync, HIGH);

  pinMode(VSync,OUTPUT);
  digitalWrite(VSync,HIGH);
  outputPinForFunction(VSync, 14);
  pinModePPS(VSync, HIGH);   
  
  pinMode(Red0,OUTPUT);
  digitalWrite(Red0,HIGH);
  outputPinForFunction(Red0, 9);
  pinModePPS(Red0, HIGH);   

  pinMode(Red1,OUTPUT);
  digitalWrite(Red1,HIGH);
  outputPinForFunction(Red1, 8);
  pinModePPS(Red1, HIGH); 
  
  pinMode(Green0,OUTPUT);
  digitalWrite(Green0,HIGH);
  outputPinForFunction(Green0, 11);
  pinModePPS(Green0, HIGH); 

  pinMode(Green1,OUTPUT);
  digitalWrite(Green1,HIGH);
  outputPinForFunction(Green1, 10);
  pinModePPS(Green1, HIGH); 

  pinMode(Blue0,OUTPUT);
  digitalWrite(Blue0,HIGH);
  outputPinForFunction(Blue0, 13);
  pinModePPS(Blue0, HIGH); 

  pinMode(Blue1,OUTPUT);
  digitalWrite(Blue1,HIGH);
  outputPinForFunction(Blue1, 12);
  pinModePPS(Blue1, HIGH);     
}
///////////////////////////////////////////////////////////////////////////////////////
/*TODO: Colocar tudo isso num header separado*/

#define TAM_IMAGEM           8
#define TAM_IMAGEM_QUADRADO  TAM_IMAGEM*TAM_IMAGEM
#define MAX_IMAGENS          128
#define TAM_TELA_H           160
#define TAM_TELA_V           120

typedef struct{
  int cor[TAM_IMAGEM_QUADRADO];
  int prox;                      //Index da próxima imagem, usado para animação. -1 se a imagem for estática.
  int tempo;                     //Quantas vezes se espera para ir para a próxima imagem na animação
  } Imagem, *pImagem;

Imagem  IMAGEM[MAX_IMAGENS];
int     TELA[TAM_TELA_H * TAM_TELA_V];
int     TELA_Anterior[TAM_TELA_H * TAM_TELA_V];

void desenhaTela(){
  ////////////////
  //Desenha a tela atual na saída
  ////////////////
  int tamanho = TAM_TELA_H * TAM_TELA_V;
  for(int i=0; i<tamanho; i++){
    if(TELA[i] != TELA_Anterior[i]){
      VGA.setColor((int) TELA[i]);
      VGA.putPixel(i%TAM_TELA_H,i/TAM_TELA_H);
      TELA_Anterior[i] = TELA[i];
    }
  }
}

void desenhaImagem(int idImagem, int x, int y){
  ////////////////
  //Desenha a imagem do id especificado na tela da memória
  ////////////////
  int xTela = x;
  int yTela = y;
  int coluna, linha;
  for(int j=0; j<TAM_IMAGEM; j++){
    for(int i=0; i<TAM_IMAGEM; i++){
        coluna = xTela+i;
        linha  = yTela+j;
        if(coluna>=0 && coluna<TAM_TELA_H && linha>=0 && linha<TAM_TELA_V){
          if(IMAGEM[idImagem].cor[i+(j*TAM_IMAGEM)] >= 0){  //Transparencia
            TELA[(xTela+i)+((yTela+j)*TAM_TELA_H)] = IMAGEM[idImagem].cor[i+(j*TAM_IMAGEM)];
          }
        }
    }
  }
}

void copiaImagem(int idDestino, int origem[]){
  ////////////////
  //Copia a imagem contida em um vetor para um id de imagem
  ////////////////
  for(int i=0; i<TAM_IMAGEM_QUADRADO; i++){
    IMAGEM[idDestino].cor[i] = origem[i];
  }
}

///////////////////////////////////////////////////////////////////////////////////////
/*TODO: Colocar essa função num header só dela pra poder mudar as imagens mais fácil*/

void inicializaImagens(){
  ////////////////
  //Carrega todas as imagens na memória
  ////////////////
  int vazio[TAM_IMAGEM_QUADRADO] = {
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1
  };
  
  int cor128[TAM_IMAGEM_QUADRADO] = {
    64, 65, 66, 67, 68, 69, 70,
    71, 72, 73, 74, 75, 76, 77,
    78, 79, 80, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 91,
    92, 93, 94, 95, 96, 97, 98,
    99, 100, 101, 102, 103, 104, 105,
    106, 107, 108, 109, 110, 111, 112,
    113, 114, 115, 116, 117, 118, 119,
    120, 121, 122, 123, 124, 125, 126, 127
  };
  
  int cor192[TAM_IMAGEM_QUADRADO] = {
    128, 129, 130, 131, 132, 133, 134, 135,
     16, 137, 138, 139, 140, 141, 142, 143,
    144, 145, 146, 147, 148, 149, 150, 151,
    152, 153, 154, 155, 156, 157, 158, 159,
    160, 161, 162, 163, 164, 165, 166, 167,
    168, 169, 170, 171, 172, 173, 174, 175,
    176, 177, 178, 179, 180, 181, 182, 183,
    184, 185, 186, 187, 188, 189, 190, 191
  };
  
  int cor256[TAM_IMAGEM_QUADRADO] = {
    192, 193, 194, 195, 196, 197, 198, 199,
    200, 201, 202, 203, 204, 205, 206, 207,
    208, 209, 210, 211, 212, 213, 214, 215, 
    216, 217, 218, 219, 220, 221, 222, 223,
    224, 225, 226, 227, 228, 229, 230, 231,
    232, 233, 234, 235, 236, 237, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 
    248, 249, 250, 251, 252, 253, 254, 255
  };
  
  int chao[TAM_IMAGEM_QUADRADO] = {
    146, 73, 146, 73, 146, 73, 146, 146, 
    73, 73, 73, 73, 73, 73, 73, 0, 
    146, 73, 73, 73, 73, 73, 73, 73, 
    73, 73, 73, 73, 73, 73, 73, 0, 
    146, 73, 73, 73, 73, 73, 73, 73, 
    73, 73, 73, 73, 73, 73, 73, 0, 
    146, 73, 73, 73, 73, 73, 73, 73, 
    146, 0, 73, 0, 73, 0, 73, 0
  };
  
  int parede[TAM_IMAGEM_QUADRADO] = {
    208, 172, 172, 172, 172, 104, 208, 208,
    172, 172, 172, 172, 172, 104, 172, 172,
    172, 172, 136, 136, 136, 104, 172, 172,
    104, 104, 104, 104, 104, 104, 104, 104,
    172, 172, 104, 208, 208, 208, 172, 172,
    172, 172, 104, 172, 172, 172, 172, 172,
    136, 136, 104, 172, 172, 172, 172, 136,
    104, 104, 104, 104, 104, 104, 104, 104
  };
  
  int transparente[TAM_IMAGEM_QUADRADO] = {
      0,  -1,   0,  -1,   0,  -1,   0,  -1,
     -1,   0,  -1,   0,  -1,   0,  -1,   0,
      0,  -1,   0,  -1,   0,  -1,   0,  -1,
     -1,   0,  -1,   0,  -1,   0,  -1,   0,
      0,  -1,   0,  -1,   0,  -1,   0,  -1,
     -1,   0,  -1,   0,  -1,   0,  -1,   0,
      0,  -1,   0,  -1,   0,  -1,   0,  -1,
     -1,   0,  -1,   0,  -1,   0,  -1,   0
  };
  
  int logo0[TAM_IMAGEM_QUADRADO] = {
       0,   0,   0,   0,   0,   0,  73,  73,
       0,   0,   0,   0,   0,  73,  -1,  -1,
       0,   0,   0,   0,  73,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  73,
       0,   0,   0,  73,  -1,  -1,  -1,  73,
       0,   0,   0,   0,  73,  73,  73,  73
  };
  
  int logo1[TAM_IMAGEM_QUADRADO] = {
      73,  73,  73,  73,  73,  73,  73,  73,
      -1,  -1,  -1,  73, 146, 146, 146, 146,
      -1,  -1,  -1,  -1,  73, 146, 146, 146,
      -1,  -1,  -1,  -1,  -1,  73, 146, 146,
      73,  -1,  -1,  -1,  -1,  73, 146, 146,
      73,  73,  -1,  -1,  -1,  73, 146, 146,
      73,  -1,  -1,  -1,  -1,  73, 146, 146,
      -1,  -1,  -1,  -1,  -1,  73, 146, 146,
  };
  
  int logo2[TAM_IMAGEM_QUADRADO] = {
      73,  73,  73,  73,  73,  73,  73,  73,
     146, 146,  73,  73, 146, 146, 146,  73,
     146,  73, 255, 255,  73, 146,  73, 255,
      73, 255,  73,  73, 255,  73, 255,  73,
      73, 255, 255, 255, 255,  73,  73, 255,
      73, 255,  73,  73,  73, 146,  73,  73,
     146,  73, 255, 255, 255,  73, 255, 255,
     146, 146,  73,  73,  73, 146,  73,  73,
  };
  
  int logo3[TAM_IMAGEM_QUADRADO] = {
      73,  73,  73,  73,  73,  73,  73,  73,
      73,  73, 146, 146, 146, 146, 146, 146,
     255, 255,  73, 146, 146, 146, 146, 146,
      73,  73, 146, 146, 146, 146, 146, 146,
     255,  73, 146, 146, 146, 146, 146, 146,
      73, 255,  73, 146, 146, 146, 146, 146,
     255,  73, 146, 146, 146, 146, 146, 146,
      73, 146, 146, 146, 146, 146, 146, 146
  };
  
  int logo4[TAM_IMAGEM_QUADRADO] = {
      73,  73,  73,  73,  73,  73,  73,  73,
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146, 146, 146, 146, 146, 146,  73
  };
  
  int logo5[TAM_IMAGEM_QUADRADO] = {
       0,   0,   0,   0,   0,   0,  73,  -1,
       0,   0,   0,   0,   0,  73,  -1,  -1,
       0,   0,   0,   0,  73,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  -1,
       0,   0,   0,  73,  -1,  -1,  -1,  -1,
       0,   0,   0,  73,  73,  73,  73,  73
  };
  
  int logo6[TAM_IMAGEM_QUADRADO] = {
      -1,  -1,  -1,  -1,  73, 146, 146, 146,
      -1,  -1,  -1,  73, 146, 146, 146, 146,
      -1,  -1,  73, 146, 146, 146, 146, 146,
      -1,  73,  73,  73,  73, 146, 146, 146,
      -1,  -1,  -1,  -1,  -1,  73, 146, 146,
      -1,  -1,  -1,  -1,  -1,  73, 146, 146,
      -1,  -1,  -1,  -1,  -1,  73, 146, 146,
      73,  73,  73,  73,  73,  73,  73,  73
  };
  
  int logo7[TAM_IMAGEM_QUADRADO] = {
     146,  73, 146, 146, 146, 146, 146, 146,
      73, 255,  73, 146, 146, 146,  73, 146,
      73, 255,  73, 146, 146,  73, 255,  73,
      73, 255,  73, 146,  73, 255,  73, 255,
      73, 255,  73, 146,  73, 255,  73, 255,
      73, 255,  73,  73,  73, 255, 255, 255,
      73, 255, 255, 255,  73, 255,  73, 255,
      73,  73,  73,  73,  73,  73,  73,  73
  };
  
  int logo8[TAM_IMAGEM_QUADRADO] = {
     146, 146, 146, 146, 146, 146, 146, 146,
     146,  73,  73, 146, 146,  73, 146,  73,
      73, 255, 255,  73,  73, 255,  73, 255,
      73, 255,  73, 255,  73, 255,  73, 255,
      73, 255,  73, 255,  73, 255,  73, 255,
      73, 255,  73, 255,  73, 255,  73, 255,
      73, 255, 255,  73,  73, 255,  73, 255,
      73,  73,  73,  73,  73,  73,  73,  73
  };
  
  int logo9[TAM_IMAGEM_QUADRADO] = {
     146, 146, 146, 146, 146, 146, 146,  73,
     146, 146,  73, 146, 146,  73, 146,  73,
      73,  73, 255,  73,  73, 255,  73,  73,
     255,  73, 255,  73, 255,  73, 255,  73,
      73, 255, 255,  73, 255,  73, 255,  73,
      73,  73, 255,  73, 255,  73, 255,  73,
      73,  73, 255,  73,  73, 255,  73,  73,
      73,  73,  73,  73,  73,  73,  73,  73
  };
  
  int gradiente1[TAM_IMAGEM_QUADRADO] = {
     252, 252, 252, 252, 252, 252, 252, 252,
     252, 252, 252, 252, 252, 252, 252, 252,
     248, 248, 248, 248, 248, 248, 248, 248,
     248, 248, 248, 248, 248, 248, 248, 248,
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244,
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240
  };
  
  int gradiente2[TAM_IMAGEM_QUADRADO] = {
     248, 248, 248, 248, 248, 248, 248, 248,
     248, 248, 248, 248, 248, 248, 248, 248,
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244,
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240,
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236 
  };
  
  int gradiente3[TAM_IMAGEM_QUADRADO] = {
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244,
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240,
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236,
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232
  };
  
  int gradiente4[TAM_IMAGEM_QUADRADO] = {
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240,
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236,
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232,
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228
  };
  
  int gradiente5[TAM_IMAGEM_QUADRADO] = {
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236,
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232,
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228,
     224, 224, 224, 224, 224, 224, 224, 224,
     224, 224, 224, 224, 224, 224, 224, 224
  };
  
  int gradiente6[TAM_IMAGEM_QUADRADO] = {
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232,
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228,
     224, 224, 224, 224, 224, 224, 224, 224,
     224, 224, 224, 224, 224, 224, 224, 224,
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228
  };
  
  int gradiente7[TAM_IMAGEM_QUADRADO] = {
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228,
     224, 224, 224, 224, 224, 224, 224, 224,
     224, 224, 224, 224, 224, 224, 224, 224,
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228,
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232
  };
  
  int gradiente8[TAM_IMAGEM_QUADRADO] = {
     224, 224, 224, 224, 224, 224, 224, 224,
     224, 224, 224, 224, 224, 224, 224, 224,
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228,
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232,
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236
  };
  
  int gradiente9[TAM_IMAGEM_QUADRADO] = {
     228, 228, 228, 228, 228, 228, 228, 228,
     228, 228, 228, 228, 228, 228, 228, 228,
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232,
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236,
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240
  };
  
  int gradiente10[TAM_IMAGEM_QUADRADO] = {
     232, 232, 232, 232, 232, 232, 232, 232,
     232, 232, 232, 232, 232, 232, 232, 232,
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236,
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240,
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244
  };
  
  int gradiente11[TAM_IMAGEM_QUADRADO] = {
     236, 236, 236, 236, 236, 236, 236, 236,
     236, 236, 236, 236, 236, 236, 236, 236,
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240,
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244,
     248, 248, 248, 248, 248, 248, 248, 248, 
     248, 248, 248, 248, 248, 248, 248, 248
  };
  
  int gradiente12[TAM_IMAGEM_QUADRADO] = {
     240, 240, 240, 240, 240, 240, 240, 240,
     240, 240, 240, 240, 240, 240, 240, 240,
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244,
     248, 248, 248, 248, 248, 248, 248, 248, 
     248, 248, 248, 248, 248, 248, 248, 248,
     252, 252, 252, 252, 252, 252, 252, 252, 
     252, 252, 252, 252, 252, 252, 252, 252
  };
  
  int gradiente13[TAM_IMAGEM_QUADRADO] = {
     244, 244, 244, 244, 244, 244, 244, 244,
     244, 244, 244, 244, 244, 244, 244, 244,
     248, 248, 248, 248, 248, 248, 248, 248, 
     248, 248, 248, 248, 248, 248, 248, 248,
     252, 252, 252, 252, 252, 252, 252, 252, 
     252, 252, 252, 252, 252, 252, 252, 252,
     248, 248, 248, 248, 248, 248, 248, 248, 
     248, 248, 248, 248, 248, 248, 248, 248
  };
  
  copiaImagem(0,vazio);
  
  copiaImagem(1,chao);
  
  copiaImagem(2,parede);
  
  copiaImagem(3,transparente);
  
  copiaImagem(101,logo0);
  
  copiaImagem(102,logo1);
  
  copiaImagem(103,logo2);
  
  copiaImagem(104,logo3);
  
  copiaImagem(105,logo4);
  
  copiaImagem(106,logo5);
  
  copiaImagem(107,logo6);
  
  copiaImagem(108,logo7);
  
  copiaImagem(109,logo8);
  
  copiaImagem(110,logo9);
  
  IMAGEM[111].prox = 112;
  IMAGEM[111].tempo = 4;
  copiaImagem(111,gradiente1);
  IMAGEM[112].prox = 113;
  IMAGEM[112].tempo = 4;
  copiaImagem(112,gradiente2);
  IMAGEM[113].prox = 114;
  IMAGEM[113].tempo = 4;
  copiaImagem(113,gradiente3);
  IMAGEM[114].prox = 115;
  IMAGEM[114].tempo = 4;
  copiaImagem(114,gradiente4);
  IMAGEM[115].prox = 116;
  IMAGEM[115].tempo = 4;
  copiaImagem(115,gradiente5);
  IMAGEM[116].prox = 117;
  IMAGEM[116].tempo = 4;
  copiaImagem(116,gradiente6);
  IMAGEM[117].prox = 118;
  IMAGEM[117].tempo = 4;
  copiaImagem(117,gradiente7);
  IMAGEM[118].prox = 119;
  IMAGEM[118].tempo = 4;
  copiaImagem(118,gradiente8);
  IMAGEM[119].prox = 120;
  IMAGEM[119].tempo = 4;
  copiaImagem(119,gradiente9);
  IMAGEM[120].prox = 111;
  IMAGEM[120].tempo = 4;
  copiaImagem(120,gradiente10);
  IMAGEM[121].prox = 122;
  IMAGEM[121].tempo = 4;
  copiaImagem(121,gradiente11);
  IMAGEM[122].prox = 123;
  IMAGEM[122].tempo = 4;
  copiaImagem(122,gradiente12);
  IMAGEM[123].prox = 111;
  IMAGEM[123].tempo = 4;
  copiaImagem(123,gradiente13);
  
  copiaImagem(4,(int[]){
    -1,-1,100,136,136,-1,-1,-1,
    -1,100,136,136,136,136,-1,-1,
    -1,136,250,0,250,0,-1,-1,
    -1,64,250,250,250,250,-1,-1,
    64,64,96,96,96,128,-1,-1,
    40,96,64,96,40,40,40,-1,
    213,96,42,42,46,46,250,-1,
    64,42,64,-1,-1,46,-1,-1
  });
  copiaImagem(124,(int[]){
    0, 1, 2, 3, 4, 5, 6, 7,
    8, 9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21,
    22, 23, 24, 25, 26, 27, 28,
    29, 30, 31, 32, 33, 34, 35,
    36, 37, 38, 39, 40, 41, 42,
    43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56,
    57, 58, 59, 60, 61, 62, 63
  });
  copiaImagem(125,cor128);
  copiaImagem(126,cor192);
  copiaImagem(127,cor256);
}

///////////////////////////////////////////////////////////////////////////////////////

//20x15
int mapa[(TAM_TELA_H*TAM_TELA_V)/TAM_IMAGEM] = {
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0, 111, 111, 103, 104, 105,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0, 115, 115, 108, 109, 110,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   0,
    0,   0,   0,   0,   0,   0,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   1,   0,
    0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   1,   2,   2,   2,   0,
    0,   0,   0,   0,   0,   0,   2,   2,   2,   1,   2,   1,   2,   2,   2,   1,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   2,   1,   1,   1,   2,   2,   2,   0,   0,   0,
  124,   0,   0,   0,   0,   0,   0,   2,   2,   2,   2,   2,   1,   1,   0,   0,   0,   0,   0,   0,
  125,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   0,   0,   0,   0,   0,   0,
  126,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,
  127,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
};

int mapaOverlay[(TAM_TELA_H*TAM_TELA_V)/TAM_IMAGEM] = {
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0, 101, 102,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0, 106, 107,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   4,   0,   0,   0,   0,   3,   3,   3,   3,   0,
    0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   3,   3,   0,   0,   0,   0,   3,   3,   3,   3,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   3,   3,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   3,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
};

int timerAnimacao = 0;

void mostraMapa(){
  timerAnimacao += 2;
  if(timerAnimacao >= 100){
    timerAnimacao = 0;
  }
  
  for(int j=0; j<TAM_TELA_V/TAM_IMAGEM; j++){
    for(int i=0; i<TAM_TELA_H/TAM_IMAGEM; i++){
      if(IMAGEM[mapa[i+j*TAM_TELA_H/TAM_IMAGEM]].tempo>0 && (timerAnimacao%IMAGEM[mapa[i+j*TAM_TELA_H/TAM_IMAGEM]].tempo==0)){
        mapa[i+j*TAM_TELA_H/TAM_IMAGEM] = IMAGEM[mapa[i+j*TAM_TELA_H/TAM_IMAGEM]].prox;
      } 
      desenhaImagem(mapa[i+j*TAM_TELA_H/TAM_IMAGEM],i*8,j*8);
    }
  }
  
  for(int j=0; j<TAM_TELA_V/TAM_IMAGEM; j++){
    for(int i=0; i<TAM_TELA_H/TAM_IMAGEM; i++){
      if(mapaOverlay[i+j*TAM_TELA_H/TAM_IMAGEM] >= 0){
        desenhaImagem(mapaOverlay[i+j*TAM_TELA_H/TAM_IMAGEM],i*8,j*8);
      }
    }
  }
}

void setup() {
  //Uncomment this if you are using the pinselect variant
  
  setup_pin_select();
  VGA.begin(VGAWISHBONESLOT(9),CHARMAPWISHBONESLOT(10));
  VGA.clear();
  
  // TODO: Diminuir memória que imagens gastam (Int pra int)
  inicializaImagens();
}

void loop() {
  mostraMapa();
  
  desenhaTela();
  //delay(500);
}

